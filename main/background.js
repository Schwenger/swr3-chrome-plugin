// Generated by CoffeeScript 1.9.3
(function() {
  var checkHighFrequencyRestarting, findFirst, highFrequencyRestartCounter, init_radio, initializing, lastRestartTime, playlistURL, radio, reset, setIcon, start_stream, stop_stream, trigger;

  initializing = false;

  radio = null;

  playlistURL = "http://mp3-live.swr3.de/swr3_s.m3u";

  lastRestartTime = 0;

  highFrequencyRestartCounter = 0;

  chrome.browserAction.onClicked.addListener(function(tab) {
    return trigger();
  });

  chrome.runtime.onMessageExternal.addListener(function(request, sender, sendResponse) {
    if ((request != null ? request.intent : void 0) === "trigger_swr3") {
      return trigger();
    }
  });

  trigger = function() {
    var turned_on;
    if (radio != null) {
      if (radio.paused) {
        start_stream();
      } else {
        stop_stream();
      }
    } else {
      if (!initializing) {
        init_radio(playlistURL, start_stream);
      }
    }
    return turned_on = !turned_on;
  };

  init_radio = function(url, callback) {
    initializing = true;
    return jQuery.get(url, function(content) {
      var actual_url, lines, radio_tmp;
      lines = content.split("\n");
      actual_url = findFirst(lines, function(string) {
        return string.indexOf("#") !== 0;
      });
      radio_tmp = document.createElement('audio');
      radio_tmp.setId;
      radio_tmp.setAttribute('src', actual_url);
      radio = radio_tmp;
      initializing = false;
      return callback();
    });
  };

  findFirst = function(array, predicate) {
    var elem, i, len;
    for (i = 0, len = array.length; i < len; i++) {
      elem = array[i];
      if (predicate(elem)) {
        return elem;
      }
    }
  };

  start_stream = function() {
    if (checkHighFrequencyRestarting() === "red") {
      return;
    }
    radio.play();
    if (radio.paused) {
      console.log("player irresponsive; reinitializing");
      return init_radio(playlistURL, start_stream);
    } else {
      return setIcon("green");
    }
  };

  checkHighFrequencyRestarting = function() {
    var currentTime, status;
    status = "green";
    currentTime = new Date().getTime();
    if (currentTime - lastRestartTime < 3 * 1000) {
      console.log("suspicion raised");
      highFrequencyRestartCounter++;
      if (highFrequencyRestartCounter > 3) {
        console.log("detected restarts in a high frequency; reinitializing");
        reset();
        status = "red";
      }
    } else {
      highFrequencyRestartCounter = 0;
    }
    lastRestartTime = currentTime;
    return status;
  };

  reset = function() {
    var currentTime;
    radio = void 0;
    highFrequencyRestartCounter = 0;
    currentTime = 0;
    return init_radio(playlistURL, start_stream);
  };

  stop_stream = function() {
    radio.pause();
    if (radio.paused) {
      return setIcon("red");
    } else {
      console.log("player irresponsive; reinitializing");
      return init_radio(playlistURL, stop_stream);
    }
  };

  setIcon = function(kind) {
    return chrome.browserAction.setIcon({
      path: "images/icon48" + kind + ".png"
    });
  };

}).call(this);
